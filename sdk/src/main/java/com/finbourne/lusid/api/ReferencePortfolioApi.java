/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateReferencePortfolioRequest;
import com.finbourne.lusid.model.GetReferencePortfolioConstituentsResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Portfolio;
import com.finbourne.lusid.model.ResourceListOfConstituentsAdjustmentHeader;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentsRequest;
import com.finbourne.lusid.model.UpsertReferencePortfolioConstituentsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferencePortfolioApi {
    private ApiClient localVarApiClient;

    public ReferencePortfolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferencePortfolioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createReferencePortfolio
     * @param scope The intended scope of the portfolio (required)
     * @param referencePortfolio The portfolio creation request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReferencePortfolioCall(String scope, CreateReferencePortfolioRequest referencePortfolio, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = referencePortfolio;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1387");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReferencePortfolioValidateBeforeCall(String scope, CreateReferencePortfolioRequest referencePortfolio, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling createReferencePortfolio(Async)");
        }
        
        // verify the required parameter 'referencePortfolio' is set
        if (referencePortfolio == null) {
            throw new ApiException("Missing the required parameter 'referencePortfolio' when calling createReferencePortfolio(Async)");
        }
        

        okhttp3.Call localVarCall = createReferencePortfolioCall(scope, referencePortfolio, _callback);
        return localVarCall;

    }

    /**
     * Create reference portfolio
     * Create a new reference portfolio.
     * @param scope The intended scope of the portfolio (required)
     * @param referencePortfolio The portfolio creation request object (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Portfolio createReferencePortfolio(String scope, CreateReferencePortfolioRequest referencePortfolio) throws ApiException {
        ApiResponse<Portfolio> localVarResp = createReferencePortfolioWithHttpInfo(scope, referencePortfolio);
        return localVarResp.getData();
    }

    /**
     * Create reference portfolio
     * Create a new reference portfolio.
     * @param scope The intended scope of the portfolio (required)
     * @param referencePortfolio The portfolio creation request object (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Portfolio> createReferencePortfolioWithHttpInfo(String scope, CreateReferencePortfolioRequest referencePortfolio) throws ApiException {
        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, referencePortfolio, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reference portfolio (asynchronously)
     * Create a new reference portfolio.
     * @param scope The intended scope of the portfolio (required)
     * @param referencePortfolio The portfolio creation request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created reference portfolio, with populated id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReferencePortfolioAsync(String scope, CreateReferencePortfolioRequest referencePortfolio, final ApiCallback<Portfolio> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReferencePortfolioValidateBeforeCall(scope, referencePortfolio, _callback);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReferencePortfolioConstituents
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio. (required)
     * @param effectiveAt The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)
     * @param asAt The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;ReferenceHolding\&quot; domain to decorate onto              the constituents. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;ReferenceHolding/strategy/quantsignal\&quot;. Defaults to return all available instrument and reference holding properties if not specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReferencePortfolioConstituentsCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituents"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (effectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveAt", effectiveAt));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1387");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReferencePortfolioConstituentsValidateBeforeCall(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getReferencePortfolioConstituents(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getReferencePortfolioConstituents(Async)");
        }
        

        okhttp3.Call localVarCall = getReferencePortfolioConstituentsCall(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        return localVarCall;

    }

    /**
     * Get constituents
     * Get constituents from the specified reference portfolio at an effective time.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio. (required)
     * @param effectiveAt The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)
     * @param asAt The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;ReferenceHolding\&quot; domain to decorate onto              the constituents. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;ReferenceHolding/strategy/quantsignal\&quot;. Defaults to return all available instrument and reference holding properties if not specified. (optional)
     * @return GetReferencePortfolioConstituentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetReferencePortfolioConstituentsResponse getReferencePortfolioConstituents(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        ApiResponse<GetReferencePortfolioConstituentsResponse> localVarResp = getReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
        return localVarResp.getData();
    }

    /**
     * Get constituents
     * Get constituents from the specified reference portfolio at an effective time.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio. (required)
     * @param effectiveAt The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)
     * @param asAt The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;ReferenceHolding\&quot; domain to decorate onto              the constituents. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;ReferenceHolding/strategy/quantsignal\&quot;. Defaults to return all available instrument and reference holding properties if not specified. (optional)
     * @return ApiResponse&lt;GetReferencePortfolioConstituentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReferencePortfolioConstituentsResponse> getReferencePortfolioConstituentsWithHttpInfo(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys) throws ApiException {
        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, null);
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get constituents (asynchronously)
     * Get constituents from the specified reference portfolio at an effective time.
     * @param scope The scope of the reference portfolio. (required)
     * @param code The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio. (required)
     * @param effectiveAt The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)
     * @param asAt The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)
     * @param propertyKeys A list of property keys from the \&quot;Instrument\&quot; or \&quot;ReferenceHolding\&quot; domain to decorate onto              the constituents. These take the format {domain}/{scope}/{code} e.g. \&quot;Instrument/system/Name\&quot; or              \&quot;ReferenceHolding/strategy/quantsignal\&quot;. Defaults to return all available instrument and reference holding properties if not specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested reference portfolio constituents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReferencePortfolioConstituentsAsync(String scope, String code, String effectiveAt, OffsetDateTime asAt, List<String> propertyKeys, final ApiCallback<GetReferencePortfolioConstituentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReferencePortfolioConstituentsValidateBeforeCall(scope, code, effectiveAt, asAt, propertyKeys, _callback);
        Type localVarReturnType = new TypeToken<GetReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConstituentsAdjustments
     * @param scope The scope of the portfolio (required)
     * @param code Code for the portfolio (required)
     * @param fromEffectiveAt Events between this time (inclusive) and the toEffectiveAt are returned. (required)
     * @param toEffectiveAt Events between this time (inclusive) and the fromEffectiveAt are returned. (required)
     * @param asAtTime The as-at time for which the result is valid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConstituentsAdjustmentsCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituentsadjustments"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromEffectiveAt", fromEffectiveAt));
        }

        if (toEffectiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toEffectiveAt", toEffectiveAt));
        }

        if (asAtTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAtTime", asAtTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1387");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConstituentsAdjustmentsValidateBeforeCall(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listConstituentsAdjustments(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling listConstituentsAdjustments(Async)");
        }
        
        // verify the required parameter 'fromEffectiveAt' is set
        if (fromEffectiveAt == null) {
            throw new ApiException("Missing the required parameter 'fromEffectiveAt' when calling listConstituentsAdjustments(Async)");
        }
        
        // verify the required parameter 'toEffectiveAt' is set
        if (toEffectiveAt == null) {
            throw new ApiException("Missing the required parameter 'toEffectiveAt' when calling listConstituentsAdjustments(Async)");
        }
        

        okhttp3.Call localVarCall = listConstituentsAdjustmentsCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback);
        return localVarCall;

    }

    /**
     * List constituents adjustments
     * List the constituent adjustments made to the specified reference portfolio over a specified interval of effective time.
     * @param scope The scope of the portfolio (required)
     * @param code Code for the portfolio (required)
     * @param fromEffectiveAt Events between this time (inclusive) and the toEffectiveAt are returned. (required)
     * @param toEffectiveAt Events between this time (inclusive) and the fromEffectiveAt are returned. (required)
     * @param asAtTime The as-at time for which the result is valid. (optional)
     * @return ResourceListOfConstituentsAdjustmentHeader
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfConstituentsAdjustmentHeader listConstituentsAdjustments(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime) throws ApiException {
        ApiResponse<ResourceListOfConstituentsAdjustmentHeader> localVarResp = listConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime);
        return localVarResp.getData();
    }

    /**
     * List constituents adjustments
     * List the constituent adjustments made to the specified reference portfolio over a specified interval of effective time.
     * @param scope The scope of the portfolio (required)
     * @param code Code for the portfolio (required)
     * @param fromEffectiveAt Events between this time (inclusive) and the toEffectiveAt are returned. (required)
     * @param toEffectiveAt Events between this time (inclusive) and the fromEffectiveAt are returned. (required)
     * @param asAtTime The as-at time for which the result is valid. (optional)
     * @return ApiResponse&lt;ResourceListOfConstituentsAdjustmentHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfConstituentsAdjustmentHeader> listConstituentsAdjustmentsWithHttpInfo(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime) throws ApiException {
        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, null);
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List constituents adjustments (asynchronously)
     * List the constituent adjustments made to the specified reference portfolio over a specified interval of effective time.
     * @param scope The scope of the portfolio (required)
     * @param code Code for the portfolio (required)
     * @param fromEffectiveAt Events between this time (inclusive) and the toEffectiveAt are returned. (required)
     * @param toEffectiveAt Events between this time (inclusive) and the fromEffectiveAt are returned. (required)
     * @param asAtTime The as-at time for which the result is valid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConstituentsAdjustmentsAsync(String scope, String code, String fromEffectiveAt, String toEffectiveAt, OffsetDateTime asAtTime, final ApiCallback<ResourceListOfConstituentsAdjustmentHeader> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConstituentsAdjustmentsValidateBeforeCall(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfConstituentsAdjustmentHeader>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertReferencePortfolioConstituents
     * @param scope The scope of the portfolio (required)
     * @param code The code of the portfolio (required)
     * @param constituents The constituents to upload to the portfolio (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertReferencePortfolioConstituentsCall(String scope, String code, UpsertReferencePortfolioConstituentsRequest constituents, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constituents;

        // create path and map variables
        String localVarPath = "/api/referenceportfolios/{scope}/{code}/constituents"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1387");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertReferencePortfolioConstituentsValidateBeforeCall(String scope, String code, UpsertReferencePortfolioConstituentsRequest constituents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling upsertReferencePortfolioConstituents(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling upsertReferencePortfolioConstituents(Async)");
        }
        
        // verify the required parameter 'constituents' is set
        if (constituents == null) {
            throw new ApiException("Missing the required parameter 'constituents' when calling upsertReferencePortfolioConstituents(Async)");
        }
        

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsCall(scope, code, constituents, _callback);
        return localVarCall;

    }

    /**
     * Add constituents
     * Add constituents to the specified reference portfolio.
     * @param scope The scope of the portfolio (required)
     * @param code The code of the portfolio (required)
     * @param constituents The constituents to upload to the portfolio (required)
     * @return UpsertReferencePortfolioConstituentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UpsertReferencePortfolioConstituentsResponse upsertReferencePortfolioConstituents(String scope, String code, UpsertReferencePortfolioConstituentsRequest constituents) throws ApiException {
        ApiResponse<UpsertReferencePortfolioConstituentsResponse> localVarResp = upsertReferencePortfolioConstituentsWithHttpInfo(scope, code, constituents);
        return localVarResp.getData();
    }

    /**
     * Add constituents
     * Add constituents to the specified reference portfolio.
     * @param scope The scope of the portfolio (required)
     * @param code The code of the portfolio (required)
     * @param constituents The constituents to upload to the portfolio (required)
     * @return ApiResponse&lt;UpsertReferencePortfolioConstituentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpsertReferencePortfolioConstituentsResponse> upsertReferencePortfolioConstituentsWithHttpInfo(String scope, String code, UpsertReferencePortfolioConstituentsRequest constituents) throws ApiException {
        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, constituents, null);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add constituents (asynchronously)
     * Add constituents to the specified reference portfolio.
     * @param scope The scope of the portfolio (required)
     * @param code The code of the portfolio (required)
     * @param constituents The constituents to upload to the portfolio (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertReferencePortfolioConstituentsAsync(String scope, String code, UpsertReferencePortfolioConstituentsRequest constituents, final ApiCallback<UpsertReferencePortfolioConstituentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertReferencePortfolioConstituentsValidateBeforeCall(scope, code, constituents, _callback);
        Type localVarReturnType = new TypeToken<UpsertReferencePortfolioConstituentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
