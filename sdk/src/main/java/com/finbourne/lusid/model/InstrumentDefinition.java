/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.InstrumentEconomicDefinition;
import com.finbourne.lusid.model.InstrumentIdValue;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * InstrumentDefinition
 */

public class InstrumentDefinition {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private Map<String, InstrumentIdValue> identifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Property> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOK_THROUGH_PORTFOLIO_ID = "lookThroughPortfolioId";
  @SerializedName(SERIALIZED_NAME_LOOK_THROUGH_PORTFOLIO_ID)
  private ResourceId lookThroughPortfolioId = null;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private InstrumentEconomicDefinition definition = null;

  public InstrumentDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the instrument.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the instrument.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstrumentDefinition identifiers(Map<String, InstrumentIdValue> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public InstrumentDefinition putIdentifiersItem(String key, InstrumentIdValue identifiersItem) {
    this.identifiers.put(key, identifiersItem);
    return this;
  }

   /**
   * A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.
   * @return identifiers
  **/
  @ApiModelProperty(required = true, value = "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.")
  public Map<String, InstrumentIdValue> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(Map<String, InstrumentIdValue> identifiers) {
    this.identifiers = identifiers;
  }

  public InstrumentDefinition properties(List<Property> properties) {
    this.properties = properties;
    return this;
  }

  public InstrumentDefinition addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Set of unique instrument properties and associated values to store with the instrument. Each property must be from the &#39;Instrument&#39; domain.
   * @return properties
  **/
  @ApiModelProperty(value = "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.")
  public List<Property> getProperties() {
    return properties;
  }

  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }

  public InstrumentDefinition lookThroughPortfolioId(ResourceId lookThroughPortfolioId) {
    this.lookThroughPortfolioId = lookThroughPortfolioId;
    return this;
  }

   /**
   * Get lookThroughPortfolioId
   * @return lookThroughPortfolioId
  **/
  @ApiModelProperty(value = "")
  public ResourceId getLookThroughPortfolioId() {
    return lookThroughPortfolioId;
  }

  public void setLookThroughPortfolioId(ResourceId lookThroughPortfolioId) {
    this.lookThroughPortfolioId = lookThroughPortfolioId;
  }

  public InstrumentDefinition definition(InstrumentEconomicDefinition definition) {
    this.definition = definition;
    return this;
  }

   /**
   * Get definition
   * @return definition
  **/
  @ApiModelProperty(value = "")
  public InstrumentEconomicDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(InstrumentEconomicDefinition definition) {
    this.definition = definition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentDefinition instrumentDefinition = (InstrumentDefinition) o;
    return Objects.equals(this.name, instrumentDefinition.name) &&
        Objects.equals(this.identifiers, instrumentDefinition.identifiers) &&
        Objects.equals(this.properties, instrumentDefinition.properties) &&
        Objects.equals(this.lookThroughPortfolioId, instrumentDefinition.lookThroughPortfolioId) &&
        Objects.equals(this.definition, instrumentDefinition.definition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, identifiers, properties, lookThroughPortfolioId, definition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    lookThroughPortfolioId: ").append(toIndentedString(lookThroughPortfolioId)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
