/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1388
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.Link;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A list of property definitions.
 */
@ApiModel(description = "A list of property definitions.")

public class PropertyDefinition {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  /**
   * The type of values that can be associated with this property. This is defined by the property&#39;s data type.
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    MAP("Map"),
    
    LIST("List"),
    
    PROPERTYARRAY("PropertyArray"),
    
    PERCENTAGE("Percentage"),
    
    BENCHMARKTYPE("BenchmarkType"),
    
    CODE("Code"),
    
    ID("Id"),
    
    URI("Uri"),
    
    ARRAYOFIDS("ArrayOfIds"),
    
    ARRAYOFTRANSACTIONALIASES("ArrayOfTransactionAliases"),
    
    ARRAYOFTRANSACTIONMOVEMENTS("ArrayofTransactionMovements"),
    
    ARRAYOFUNITS("ArrayofUnits"),
    
    STRINGARRAY("StringArray"),
    
    CURRENCYANDAMOUNT("CurrencyAndAmount"),
    
    TRADEPRICE("TradePrice"),
    
    UNITCREATION("UnitCreation"),
    
    CURRENCY("Currency"),
    
    USERID("UserId"),
    
    METRICVALUE("MetricValue"),
    
    QUOTEID("QuoteId"),
    
    QUOTESERIESID("QuoteSeriesId"),
    
    RESOURCEID("ResourceId"),
    
    RESULTVALUE("ResultValue"),
    
    CUTLOCALTIME("CutLocalTime"),
    
    DATEORCUTLABEL("DateOrCutLabel"),
    
    TRANSITION("Transition"),
    
    STRUCTUREDDATA("StructuredData"),
    
    STRUCTUREDDATAID("StructuredDataId"),
    
    CONFIGURATIONRECIPE("ConfigurationRecipe"),
    
    CONFIGURATIONRECIPESNIPPET("ConfigurationRecipeSnippet"),
    
    STRUCTUREDRESULTDATAID("StructuredResultDataId"),
    
    STRUCTUREDRESULTDATA("StructuredResultData"),
    
    DATAMAPPING("DataMapping"),
    
    LUSIDINSTRUMENT("LusidInstrument"),
    
    WEIGHTEDINSTRUMENT("WeightedInstrument"),
    
    TENOR("Tenor"),
    
    CDSDETAILSPECIFICATIONS("CdsDetailSpecifications"),
    
    FLOWCONVENTIONS("FlowConventions"),
    
    ORDERID("OrderId");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public static final String SERIALIZED_NAME_VALUE_REQUIRED = "valueRequired";
  @SerializedName(SERIALIZED_NAME_VALUE_REQUIRED)
  private Boolean valueRequired;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DATA_TYPE_ID = "dataTypeId";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_ID)
  private ResourceId dataTypeId = null;

  /**
   * Describes how the property&#39;s values can change over time.
   */
  @JsonAdapter(LifeTimeEnum.Adapter.class)
  public enum LifeTimeEnum {
    PERPETUAL("Perpetual"),
    
    TIMEVARIANT("TimeVariant");

    private String value;

    LifeTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifeTimeEnum fromValue(String value) {
      for (LifeTimeEnum b : LifeTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifeTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifeTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifeTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LifeTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private LifeTimeEnum lifeTime;

  /**
   * The type of the property.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LABEL("Label"),
    
    METRIC("Metric"),
    
    INFORMATION("Information");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * The units that can be associated with the property&#39;s values. This is defined by the property&#39;s data type.
   */
  @JsonAdapter(UnitSchemaEnum.Adapter.class)
  public enum UnitSchemaEnum {
    NOUNITS("NoUnits"),
    
    BASIC("Basic"),
    
    ISO4217CURRENCY("Iso4217Currency");

    private String value;

    UnitSchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitSchemaEnum fromValue(String value) {
      for (UnitSchemaEnum b : UnitSchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitSchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitSchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitSchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UnitSchemaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT_SCHEMA = "unitSchema";
  @SerializedName(SERIALIZED_NAME_UNIT_SCHEMA)
  private UnitSchemaEnum unitSchema;

  /**
   * The domain that the property exists in.
   */
  @JsonAdapter(DomainEnum.Adapter.class)
  public enum DomainEnum {
    NOTDEFINED("NotDefined"),
    
    TRANSACTION("Transaction"),
    
    PORTFOLIO("Portfolio"),
    
    HOLDING("Holding"),
    
    REFERENCEHOLDING("ReferenceHolding"),
    
    TRANSACTIONCONFIGURATION("TransactionConfiguration"),
    
    INSTRUMENT("Instrument"),
    
    CUTLABELDEFINITION("CutLabelDefinition"),
    
    ANALYTIC("Analytic"),
    
    PORTFOLIOGROUP("PortfolioGroup"),
    
    PERSON("Person"),
    
    ACCESSMETADATA("AccessMetadata"),
    
    ORDER("Order"),
    
    UNITRESULT("UnitResult"),
    
    MARKETDATA("MarketData"),
    
    CONFIGURATIONRECIPE("ConfigurationRecipe"),
    
    ALLOCATION("Allocation");

    private String value;

    DomainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainEnum fromValue(String value) {
      for (DomainEnum b : DomainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DomainEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private DomainEnum domain;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CONSTRAINT_STYLE = "constraintStyle";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_STYLE)
  private String constraintStyle;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = new ArrayList<>();

  public PropertyDefinition href(String href) {
    this.href = href;
    return this;
  }

   /**
   * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
   * @return href
  **/
  @ApiModelProperty(value = "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public PropertyDefinition key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.
   * @return key
  **/
  @ApiModelProperty(value = "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public PropertyDefinition valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

   /**
   * The type of values that can be associated with this property. This is defined by the property&#39;s data type.
   * @return valueType
  **/
  @ApiModelProperty(value = "The type of values that can be associated with this property. This is defined by the property's data type.")
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }

  public PropertyDefinition valueRequired(Boolean valueRequired) {
    this.valueRequired = valueRequired;
    return this;
  }

   /**
   * Whether or not a value is always required for this property.
   * @return valueRequired
  **/
  @ApiModelProperty(value = "Whether or not a value is always required for this property.")
  public Boolean getValueRequired() {
    return valueRequired;
  }

  public void setValueRequired(Boolean valueRequired) {
    this.valueRequired = valueRequired;
  }

  public PropertyDefinition displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the property.
   * @return displayName
  **/
  @ApiModelProperty(value = "The display name of the property.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public PropertyDefinition dataTypeId(ResourceId dataTypeId) {
    this.dataTypeId = dataTypeId;
    return this;
  }

   /**
   * Get dataTypeId
   * @return dataTypeId
  **/
  @ApiModelProperty(value = "")
  public ResourceId getDataTypeId() {
    return dataTypeId;
  }

  public void setDataTypeId(ResourceId dataTypeId) {
    this.dataTypeId = dataTypeId;
  }

  public PropertyDefinition lifeTime(LifeTimeEnum lifeTime) {
    this.lifeTime = lifeTime;
    return this;
  }

   /**
   * Describes how the property&#39;s values can change over time.
   * @return lifeTime
  **/
  @ApiModelProperty(value = "Describes how the property's values can change over time.")
  public LifeTimeEnum getLifeTime() {
    return lifeTime;
  }

  public void setLifeTime(LifeTimeEnum lifeTime) {
    this.lifeTime = lifeTime;
  }

  public PropertyDefinition type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the property.
   * @return type
  **/
  @ApiModelProperty(value = "The type of the property.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PropertyDefinition unitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema;
    return this;
  }

   /**
   * The units that can be associated with the property&#39;s values. This is defined by the property&#39;s data type.
   * @return unitSchema
  **/
  @ApiModelProperty(value = "The units that can be associated with the property's values. This is defined by the property's data type.")
  public UnitSchemaEnum getUnitSchema() {
    return unitSchema;
  }

  public void setUnitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema;
  }

   /**
   * The domain that the property exists in.
   * @return domain
  **/
  @ApiModelProperty(value = "The domain that the property exists in.")
  public DomainEnum getDomain() {
    return domain;
  }

   /**
   * The scope that the property exists in.
   * @return scope
  **/
  @ApiModelProperty(value = "The scope that the property exists in.")
  public String getScope() {
    return scope;
  }

   /**
   * The code of the property. Together with the domain and scope this uniquely identifies the property.
   * @return code
  **/
  @ApiModelProperty(value = "The code of the property. Together with the domain and scope this uniquely identifies the property.")
  public String getCode() {
    return code;
  }

  public PropertyDefinition constraintStyle(String constraintStyle) {
    this.constraintStyle = constraintStyle;
    return this;
  }

   /**
   * Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.
   * @return constraintStyle
  **/
  @ApiModelProperty(value = "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.")
  public String getConstraintStyle() {
    return constraintStyle;
  }

  public void setConstraintStyle(String constraintStyle) {
    this.constraintStyle = constraintStyle;
  }

  public PropertyDefinition links(List<Link> links) {
    this.links = links;
    return this;
  }

  public PropertyDefinition addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDefinition propertyDefinition = (PropertyDefinition) o;
    return Objects.equals(this.href, propertyDefinition.href) &&
        Objects.equals(this.key, propertyDefinition.key) &&
        Objects.equals(this.valueType, propertyDefinition.valueType) &&
        Objects.equals(this.valueRequired, propertyDefinition.valueRequired) &&
        Objects.equals(this.displayName, propertyDefinition.displayName) &&
        Objects.equals(this.dataTypeId, propertyDefinition.dataTypeId) &&
        Objects.equals(this.lifeTime, propertyDefinition.lifeTime) &&
        Objects.equals(this.type, propertyDefinition.type) &&
        Objects.equals(this.unitSchema, propertyDefinition.unitSchema) &&
        Objects.equals(this.domain, propertyDefinition.domain) &&
        Objects.equals(this.scope, propertyDefinition.scope) &&
        Objects.equals(this.code, propertyDefinition.code) &&
        Objects.equals(this.constraintStyle, propertyDefinition.constraintStyle) &&
        Objects.equals(this.links, propertyDefinition.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, key, valueType, valueRequired, displayName, dataTypeId, lifeTime, type, unitSchema, domain, scope, code, constraintStyle, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDefinition {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    valueRequired: ").append(toIndentedString(valueRequired)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dataTypeId: ").append(toIndentedString(dataTypeId)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitSchema: ").append(toIndentedString(unitSchema)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    constraintStyle: ").append(toIndentedString(constraintStyle)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
