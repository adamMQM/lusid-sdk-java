/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateInstrumentIdentifierRequest
 */

public class UpdateInstrumentIdentifierRequest {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public UpdateInstrumentIdentifierRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The allowable instrument identifier to update, insert or remove e.g. &#39;Figi&#39;.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The allowable instrument identifier to update, insert or remove e.g. 'Figi'.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public UpdateInstrumentIdentifierRequest value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.
   * @return value
  **/
  @ApiModelProperty(value = "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public UpdateInstrumentIdentifierRequest effectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
    return this;
  }

   /**
   * The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.
   * @return effectiveAt
  **/
  @ApiModelProperty(value = "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.")
  public String getEffectiveAt() {
    return effectiveAt;
  }

  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest = (UpdateInstrumentIdentifierRequest) o;
    return Objects.equals(this.type, updateInstrumentIdentifierRequest.type) &&
        Objects.equals(this.value, updateInstrumentIdentifierRequest.value) &&
        Objects.equals(this.effectiveAt, updateInstrumentIdentifierRequest.effectiveAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, effectiveAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateInstrumentIdentifierRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
