/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The description of an allowable instrument identifier.
 */
@ApiModel(description = "The description of an allowable instrument identifier.")

public class InstrumentIdTypeDescriptor {
  public static final String SERIALIZED_NAME_IDENTIFIER_TYPE = "identifierType";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_TYPE)
  private String identifierType;

  public static final String SERIALIZED_NAME_PROPERTY_KEY = "propertyKey";
  @SerializedName(SERIALIZED_NAME_PROPERTY_KEY)
  private String propertyKey;

  public static final String SERIALIZED_NAME_IS_UNIQUE_IDENTIFIER_TYPE = "isUniqueIdentifierType";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE_IDENTIFIER_TYPE)
  private Boolean isUniqueIdentifierType;

  public InstrumentIdTypeDescriptor identifierType(String identifierType) {
    this.identifierType = identifierType;
    return this;
  }

   /**
   * The name of the identifier type.
   * @return identifierType
  **/
  @ApiModelProperty(required = true, value = "The name of the identifier type.")
  public String getIdentifierType() {
    return identifierType;
  }

  public void setIdentifierType(String identifierType) {
    this.identifierType = identifierType;
  }

  public InstrumentIdTypeDescriptor propertyKey(String propertyKey) {
    this.propertyKey = propertyKey;
    return this;
  }

   /**
   * The property key that corresponds to the identifier type.
   * @return propertyKey
  **/
  @ApiModelProperty(required = true, value = "The property key that corresponds to the identifier type.")
  public String getPropertyKey() {
    return propertyKey;
  }

  public void setPropertyKey(String propertyKey) {
    this.propertyKey = propertyKey;
  }

  public InstrumentIdTypeDescriptor isUniqueIdentifierType(Boolean isUniqueIdentifierType) {
    this.isUniqueIdentifierType = isUniqueIdentifierType;
    return this;
  }

   /**
   * Whether or not the identifier type is enforced to be unique.
   * @return isUniqueIdentifierType
  **/
  @ApiModelProperty(required = true, value = "Whether or not the identifier type is enforced to be unique.")
  public Boolean getIsUniqueIdentifierType() {
    return isUniqueIdentifierType;
  }

  public void setIsUniqueIdentifierType(Boolean isUniqueIdentifierType) {
    this.isUniqueIdentifierType = isUniqueIdentifierType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentIdTypeDescriptor instrumentIdTypeDescriptor = (InstrumentIdTypeDescriptor) o;
    return Objects.equals(this.identifierType, instrumentIdTypeDescriptor.identifierType) &&
        Objects.equals(this.propertyKey, instrumentIdTypeDescriptor.propertyKey) &&
        Objects.equals(this.isUniqueIdentifierType, instrumentIdTypeDescriptor.isUniqueIdentifierType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifierType, propertyKey, isUniqueIdentifierType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentIdTypeDescriptor {\n");
    sb.append("    identifierType: ").append(toIndentedString(identifierType)).append("\n");
    sb.append("    propertyKey: ").append(toIndentedString(propertyKey)).append("\n");
    sb.append("    isUniqueIdentifierType: ").append(toIndentedString(isUniqueIdentifierType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
