/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CreateTransactionPortfolioRequest
 */

public class CreateTransactionPortfolioRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID = "corporateActionSourceId";
  @SerializedName(SERIALIZED_NAME_CORPORATE_ACTION_SOURCE_ID)
  private ResourceId corporateActionSourceId = null;

  /**
   * Determines the accounting treatment given to the transaction portfolio&#39;s tax lots.
   */
  @JsonAdapter(AccountingMethodEnum.Adapter.class)
  public enum AccountingMethodEnum {
    DEFAULT("Default"),
    
    AVERAGECOST("AverageCost"),
    
    FIRSTINFIRSTOUT("FirstInFirstOut"),
    
    LASTINFIRSTOUT("LastInFirstOut"),
    
    HIGHESTCOSTFIRST("HighestCostFirst"),
    
    LOWESTCOSTFIRST("LowestCostFirst");

    private String value;

    AccountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountingMethodEnum fromValue(String value) {
      for (AccountingMethodEnum b : AccountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AccountingMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNTING_METHOD = "accountingMethod";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_METHOD)
  private AccountingMethodEnum accountingMethod;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private List<String> subHoldingKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties = new HashMap<>();

  public CreateTransactionPortfolioRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The name of the transaction portfolio.
   * @return displayName
  **/
  @ApiModelProperty(required = true, value = "The name of the transaction portfolio.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public CreateTransactionPortfolioRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A long form description of the transaction portfolio.
   * @return description
  **/
  @ApiModelProperty(value = "A long form description of the transaction portfolio.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateTransactionPortfolioRequest code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code that the transaction portfolio will be created with. Together with the scope this uniquely identifies the transaction portfolio.
   * @return code
  **/
  @ApiModelProperty(required = true, value = "The code that the transaction portfolio will be created with. Together with the scope this uniquely identifies the transaction portfolio.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public CreateTransactionPortfolioRequest created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * The effective datetime at which the transaction portfolio will be created. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.
   * @return created
  **/
  @ApiModelProperty(value = "The effective datetime at which the transaction portfolio will be created. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public CreateTransactionPortfolioRequest baseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

   /**
   * The base currency of the transaction portfolio.
   * @return baseCurrency
  **/
  @ApiModelProperty(required = true, value = "The base currency of the transaction portfolio.")
  public String getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }

  public CreateTransactionPortfolioRequest corporateActionSourceId(ResourceId corporateActionSourceId) {
    this.corporateActionSourceId = corporateActionSourceId;
    return this;
  }

   /**
   * Get corporateActionSourceId
   * @return corporateActionSourceId
  **/
  @ApiModelProperty(value = "")
  public ResourceId getCorporateActionSourceId() {
    return corporateActionSourceId;
  }

  public void setCorporateActionSourceId(ResourceId corporateActionSourceId) {
    this.corporateActionSourceId = corporateActionSourceId;
  }

  public CreateTransactionPortfolioRequest accountingMethod(AccountingMethodEnum accountingMethod) {
    this.accountingMethod = accountingMethod;
    return this;
  }

   /**
   * Determines the accounting treatment given to the transaction portfolio&#39;s tax lots.
   * @return accountingMethod
  **/
  @ApiModelProperty(value = "Determines the accounting treatment given to the transaction portfolio's tax lots.")
  public AccountingMethodEnum getAccountingMethod() {
    return accountingMethod;
  }

  public void setAccountingMethod(AccountingMethodEnum accountingMethod) {
    this.accountingMethod = accountingMethod;
  }

  public CreateTransactionPortfolioRequest subHoldingKeys(List<String> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
    return this;
  }

  public CreateTransactionPortfolioRequest addSubHoldingKeysItem(String subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new ArrayList<>();
    }
    this.subHoldingKeys.add(subHoldingKeysItem);
    return this;
  }

   /**
   * A set of unique transaction properties to group the transaction portfolio&#39;s holdings by. Each property must be from the &#39;Transaction&#39; domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. &#39;Transaction/strategies/quantsignal&#39;.
   * @return subHoldingKeys
  **/
  @ApiModelProperty(value = "A set of unique transaction properties to group the transaction portfolio's holdings by. Each property must be from the 'Transaction' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Transaction/strategies/quantsignal'.")
  public List<String> getSubHoldingKeys() {
    return subHoldingKeys;
  }

  public void setSubHoldingKeys(List<String> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }

  public CreateTransactionPortfolioRequest properties(Map<String, Property> properties) {
    this.properties = properties;
    return this;
  }

  public CreateTransactionPortfolioRequest putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * A set of unique portfolio properties to add to the transaction portfolio. Each property must be from the &#39;Portfolio&#39; domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. These properties must be pre-defined.
   * @return properties
  **/
  @ApiModelProperty(value = "A set of unique portfolio properties to add to the transaction portfolio. Each property must be from the 'Portfolio' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'. These properties must be pre-defined.")
  public Map<String, Property> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTransactionPortfolioRequest createTransactionPortfolioRequest = (CreateTransactionPortfolioRequest) o;
    return Objects.equals(this.displayName, createTransactionPortfolioRequest.displayName) &&
        Objects.equals(this.description, createTransactionPortfolioRequest.description) &&
        Objects.equals(this.code, createTransactionPortfolioRequest.code) &&
        Objects.equals(this.created, createTransactionPortfolioRequest.created) &&
        Objects.equals(this.baseCurrency, createTransactionPortfolioRequest.baseCurrency) &&
        Objects.equals(this.corporateActionSourceId, createTransactionPortfolioRequest.corporateActionSourceId) &&
        Objects.equals(this.accountingMethod, createTransactionPortfolioRequest.accountingMethod) &&
        Objects.equals(this.subHoldingKeys, createTransactionPortfolioRequest.subHoldingKeys) &&
        Objects.equals(this.properties, createTransactionPortfolioRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, description, code, created, baseCurrency, corporateActionSourceId, accountingMethod, subHoldingKeys, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTransactionPortfolioRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    corporateActionSourceId: ").append(toIndentedString(corporateActionSourceId)).append("\n");
    sb.append("    accountingMethod: ").append(toIndentedString(accountingMethod)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
