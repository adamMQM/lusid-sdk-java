/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1392
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Expanded instrument definition - in the case of OTC instruments  this contains the definition of the non-exchange traded instrument.  The format for this can be client-defined, but in order to transparently use  vendor libraries it must conform to a format that LUSID understands.
 */
@ApiModel(description = "Expanded instrument definition - in the case of OTC instruments  this contains the definition of the non-exchange traded instrument.  The format for this can be client-defined, but in order to transparently use  vendor libraries it must conform to a format that LUSID understands.")

public class InstrumentEconomicDefinition {
  public static final String SERIALIZED_NAME_INSTRUMENT_FORMAT = "instrumentFormat";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_FORMAT)
  private String instrumentFormat;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public InstrumentEconomicDefinition instrumentFormat(String instrumentFormat) {
    this.instrumentFormat = instrumentFormat;
    return this;
  }

   /**
   * The format of the expanded definition.
   * @return instrumentFormat
  **/
  @ApiModelProperty(required = true, value = "The format of the expanded definition.")
  public String getInstrumentFormat() {
    return instrumentFormat;
  }

  public void setInstrumentFormat(String instrumentFormat) {
    this.instrumentFormat = instrumentFormat;
  }

  public InstrumentEconomicDefinition content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The content of the expanded definition. There is no validation on the format of this.
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The content of the expanded definition. There is no validation on the format of this.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentEconomicDefinition instrumentEconomicDefinition = (InstrumentEconomicDefinition) o;
    return Objects.equals(this.instrumentFormat, instrumentEconomicDefinition.instrumentFormat) &&
        Objects.equals(this.content, instrumentEconomicDefinition.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentFormat, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentEconomicDefinition {\n");
    sb.append("    instrumentFormat: ").append(toIndentedString(instrumentFormat)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
