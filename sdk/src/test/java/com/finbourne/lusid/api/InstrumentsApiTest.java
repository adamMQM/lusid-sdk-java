/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.DeleteInstrumentResponse;
import com.finbourne.lusid.model.GetInstrumentsResponse;
import com.finbourne.lusid.model.Instrument;
import com.finbourne.lusid.model.InstrumentDefinition;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PagedResourceListOfInstrument;
import com.finbourne.lusid.model.ResourceListOfInstrumentIdTypeDescriptor;
import com.finbourne.lusid.model.UpdateInstrumentIdentifierRequest;
import com.finbourne.lusid.model.UpsertInstrumentPropertiesResponse;
import com.finbourne.lusid.model.UpsertInstrumentPropertyRequest;
import com.finbourne.lusid.model.UpsertInstrumentsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstrumentsApi
 */
@Ignore
public class InstrumentsApiTest {

    private final InstrumentsApi api = new InstrumentsApi();

    
    /**
     * [EARLY ACCESS] Delete instrument
     *
     * Delete a single instrument identified by a unique instrument identifier. Once an instrument has been  deleted it will be marked as &#39;inactive&#39; and it can no longer be used when updating or inserting transactions or holdings.  You can still query existing transactions and holdings related to the deleted instrument.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstrumentTest() throws ApiException {
        String identifierType = null;
        String identifier = null;
        DeleteInstrumentResponse response = api.deleteInstrument(identifierType, identifier);

        // TODO: test validations
    }
    
    /**
     * Get instrument
     *
     * Get the definition of a single instrument identified by a unique instrument identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentTest() throws ApiException {
        String identifierType = null;
        String identifier = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        List<String> propertyKeys = null;
        Instrument response = api.getInstrument(identifierType, identifier, effectiveAt, asAt, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get instrument identifier types
     *
     * Get the allowable instrument identifier types and their descriptions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentIdentifierTypesTest() throws ApiException {
        ResourceListOfInstrumentIdTypeDescriptor response = api.getInstrumentIdentifierTypes();

        // TODO: test validations
    }
    
    /**
     * Get instruments
     *
     * Get the definition of one or more instruments identified by a collection of unique instrument identifiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentsTest() throws ApiException {
        String identifierType = null;
        List<String> identifiers = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        List<String> propertyKeys = null;
        GetInstrumentsResponse response = api.getInstruments(identifierType, identifiers, effectiveAt, asAt, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] List instruments
     *
     * List all the instruments that have been mastered in the LUSID instrument master.  The maximum number of instruments that this method can list per request is 2,000.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listInstrumentsTest() throws ApiException {
        OffsetDateTime asAt = null;
        String effectiveAt = null;
        String page = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<String> instrumentPropertyKeys = null;
        PagedResourceListOfInstrument response = api.listInstruments(asAt, effectiveAt, page, sortBy, start, limit, filter, instrumentPropertyKeys);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Update instrument identifier
     *
     * Update, insert or delete a single instrument identifier for a single instrument. If it is not being deleted  the identifier will be updated if it already exists and inserted if it does not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstrumentIdentifierTest() throws ApiException {
        String identifierType = null;
        String identifier = null;
        UpdateInstrumentIdentifierRequest request = null;
        Instrument response = api.updateInstrumentIdentifier(identifierType, identifier, request);

        // TODO: test validations
    }
    
    /**
     * Upsert instruments
     *
     * Update or insert one or more instruments into the LUSID instrument master. An instrument will be updated  if it already exists and inserted if it does not.                In the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.                The response will return both the collection of successfully updated or inserted instruments, as well as those that failed.  For the failures a reason will be provided explaining why the instrument could not be updated or inserted.                It is important to always check the failed set for any unsuccessful results.  The maximum number of instruments that this method can upsert per request is 2,000.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertInstrumentsTest() throws ApiException {
        Map<String, InstrumentDefinition> instruments = null;
        UpsertInstrumentsResponse response = api.upsertInstruments(instruments);

        // TODO: test validations
    }
    
    /**
     * Upsert instruments properties
     *
     * Update or insert one or more instrument properties for one or more instruments. Each instrument property will be updated  if it already exists and inserted if it does not. If any properties fail to be updated or inserted, none will be updated or inserted and  the reason for the failure will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertInstrumentsPropertiesTest() throws ApiException {
        List<UpsertInstrumentPropertyRequest> instrumentProperties = null;
        UpsertInstrumentPropertiesResponse response = api.upsertInstrumentsProperties(instrumentProperties);

        // TODO: test validations
    }
    
}
