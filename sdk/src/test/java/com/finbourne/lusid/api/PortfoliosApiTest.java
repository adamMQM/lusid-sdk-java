/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1391
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Portfolio;
import com.finbourne.lusid.model.PortfolioProperties;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceListOfPortfolio;
import com.finbourne.lusid.model.ResourceListOfProcessedCommand;
import com.finbourne.lusid.model.UpdatePortfolioRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfoliosApi
 */
@Ignore
public class PortfoliosApiTest {

    private final PortfoliosApi api = new PortfoliosApi();

    
    /**
     * Delete portfolio
     *
     * Delete a single portfolio. The deletion of the portfolio will be valid from the portfolio&#39;s creation datetime. This means that the portfolio will no longer exist at any effective datetime from the asAt datetime of deletion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioTest() throws ApiException {
        String scope = null;
        String code = null;
        DeletedEntityResponse response = api.deletePortfolio(scope, code);

        // TODO: test validations
    }
    
    /**
     * Delete portfolio properties
     *
     * Delete one or more properties from a single portfolio. If the properties are time variant then an effective date time from which the properties  will be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> propertyKeys = null;
        String effectiveAt = null;
        DeletedEntityResponse response = api.deletePortfolioProperties(scope, code, propertyKeys, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * Get portfolio
     *
     * Retrieve the definition of a single portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        List<String> propertyKeys = null;
        Portfolio response = api.getPortfolio(scope, code, effectiveAt, asAt, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get portfolio commands
     *
     * Gets all the commands that modified a single portfolio, including any input transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioCommandsTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime fromAsAt = null;
        OffsetDateTime toAsAt = null;
        String filter = null;
        ResourceListOfProcessedCommand response = api.getPortfolioCommands(scope, code, fromAsAt, toAsAt, filter);

        // TODO: test validations
    }
    
    /**
     * Get portfolio properties
     *
     * List all the properties of a single portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        PortfolioProperties response = api.getPortfolioProperties(scope, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * List portfolios
     *
     * List all the portfolios matching the specified criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortfoliosTest() throws ApiException {
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        String page = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        String query = null;
        List<String> propertyKeys = null;
        ResourceListOfPortfolio response = api.listPortfolios(effectiveAt, asAt, page, start, limit, filter, query, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * List portfolios for scope
     *
     * List all the portfolios in a single scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortfoliosForScopeTest() throws ApiException {
        String scope = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        String page = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<String> propertyKeys = null;
        ResourceListOfPortfolio response = api.listPortfoliosForScope(scope, effectiveAt, asAt, page, start, limit, filter, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * Update portfolio
     *
     * Update the definition of a single portfolio. Not all elements within a portfolio definition are  modifiable due to the potential implications for data already stored against the portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioTest() throws ApiException {
        String scope = null;
        String code = null;
        UpdatePortfolioRequest portfolioDefinition = null;
        String effectiveAt = null;
        Portfolio response = api.updatePortfolio(scope, code, portfolioDefinition, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * Upsert portfolio properties
     *
     * Update or insert one or more properties onto a single portfolio. A property will be updated if it  already exists and inserted if it does not. All properties must be of the domain &#39;Portfolio&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertPortfolioPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        Map<String, Property> portfolioProperties = null;
        PortfolioProperties response = api.upsertPortfolioProperties(scope, code, portfolioProperties);

        // TODO: test validations
    }
    
}
