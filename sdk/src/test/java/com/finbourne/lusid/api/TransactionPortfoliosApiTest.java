/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AdjustHolding;
import com.finbourne.lusid.model.AdjustHoldingRequest;
import com.finbourne.lusid.model.CreatePortfolioDetails;
import com.finbourne.lusid.model.CreateTransactionPortfolioRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.ExecutionRequest;
import com.finbourne.lusid.model.HoldingsAdjustment;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Portfolio;
import com.finbourne.lusid.model.PortfolioDetails;
import com.finbourne.lusid.model.ResourceListOfHoldingsAdjustmentHeader;
import com.finbourne.lusid.model.TransactionQueryParameters;
import com.finbourne.lusid.model.TransactionRequest;
import com.finbourne.lusid.model.UpsertPortfolioExecutionsResponse;
import com.finbourne.lusid.model.UpsertPortfolioTransactionsResponse;
import com.finbourne.lusid.model.UpsertTransactionPropertiesResponse;
import com.finbourne.lusid.model.VersionedResourceListOfOutputTransaction;
import com.finbourne.lusid.model.VersionedResourceListOfPortfolioHolding;
import com.finbourne.lusid.model.VersionedResourceListOfTransaction;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionPortfoliosApi
 */
@Ignore
public class TransactionPortfoliosApiTest {

    private final TransactionPortfoliosApi api = new TransactionPortfoliosApi();

    
    /**
     * Adjust holdings
     *
     * Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will  automatically construct adjustment transactions to ensure that the holdings which have been adjusted are  always set to the provided targets for the specified effective datetime. Read more about the difference between  adjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustHoldingsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        List<AdjustHoldingRequest> holdingAdjustments = null;
        List<String> reconciliationMethods = null;
        AdjustHolding response = api.adjustHoldings(scope, code, effectiveAt, holdingAdjustments, reconciliationMethods);

        // TODO: test validations
    }
    
    /**
     * Build transactions
     *
     * Builds and returns all transactions that affect the holdings of a portfolio over a given interval of  effective time into a set of output transactions. This includes transactions automatically generated by  LUSID such as holding adjustments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildTransactionsTest() throws ApiException {
        String scope = null;
        String code = null;
        TransactionQueryParameters queryParameters = null;
        OffsetDateTime asAt = null;
        String filter = null;
        List<String> propertyKeys = null;
        VersionedResourceListOfOutputTransaction response = api.buildTransactions(scope, code, queryParameters, asAt, filter, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * Cancel adjust holdings
     *
     * Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective  datetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelAdjustHoldingsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        DeletedEntityResponse response = api.cancelAdjustHoldings(scope, code, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Cancel executions
     *
     * Cancel one or more executions which exist in a specified transaction portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelExecutionsTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> executionIds = null;
        DeletedEntityResponse response = api.cancelExecutions(scope, code, executionIds);

        // TODO: test validations
    }
    
    /**
     * Cancel transactions
     *
     * Cancel one or more transactions from the specified transaction portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelTransactionsTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> transactionIds = null;
        DeletedEntityResponse response = api.cancelTransactions(scope, code, transactionIds);

        // TODO: test validations
    }
    
    /**
     * Create portfolio
     *
     * Create a transaction portfolio in a specific scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortfolioTest() throws ApiException {
        String scope = null;
        CreateTransactionPortfolioRequest transactionPortfolio = null;
        Portfolio response = api.createPortfolio(scope, transactionPortfolio);

        // TODO: test validations
    }
    
    /**
     * Delete properties from transaction
     *
     * Delete one or more property values from a single transaction in a transaction portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePropertiesFromTransactionTest() throws ApiException {
        String scope = null;
        String code = null;
        String transactionId = null;
        List<String> propertyKeys = null;
        DeletedEntityResponse response = api.deletePropertiesFromTransaction(scope, code, transactionId, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * Get details
     *
     * Get the details associated with a transaction portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        PortfolioDetails response = api.getDetails(scope, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * Get holdings
     *
     * Get the holdings of the specified transaction portfolio.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoldingsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        String filter = null;
        List<String> propertyKeys = null;
        Boolean byTaxlots = null;
        VersionedResourceListOfPortfolioHolding response = api.getHoldings(scope, code, effectiveAt, asAt, filter, propertyKeys, byTaxlots);

        // TODO: test validations
    }
    
    /**
     * Get holdings adjustment
     *
     * Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a  holdings adjustment will only be returned if one exists for the specified effective datetime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoldingsAdjustmentTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        HoldingsAdjustment response = api.getHoldingsAdjustment(scope, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * Get transactions
     *
     * Get transactions from the specified transaction portfolio over a given interval of effective time.     When the specified portfolio is a derived transaction portfolio, the returned set of transactions is the  union set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.  The maximum number of transactions that this method can get per request is 2,000.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String scope = null;
        String code = null;
        String fromTransactionDate = null;
        String toTransactionDate = null;
        OffsetDateTime asAt = null;
        String filter = null;
        List<String> propertyKeys = null;
        VersionedResourceListOfTransaction response = api.getTransactions(scope, code, fromTransactionDate, toTransactionDate, asAt, filter, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * List holdings adjustments
     *
     * List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHoldingsAdjustmentsTest() throws ApiException {
        String scope = null;
        String code = null;
        String fromEffectiveAt = null;
        String toEffectiveAt = null;
        OffsetDateTime asAt = null;
        ResourceListOfHoldingsAdjustmentHeader response = api.listHoldingsAdjustments(scope, code, fromEffectiveAt, toEffectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * Set holdings
     *
     * Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically  construct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio  are always set to the provided targets for the specified effective datetime. Read more about the difference between  adjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setHoldingsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        List<AdjustHoldingRequest> holdingAdjustments = null;
        List<String> reconciliationMethods = null;
        AdjustHolding response = api.setHoldings(scope, code, effectiveAt, holdingAdjustments, reconciliationMethods);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Upsert executions
     *
     * Update or insert executions into the specified transaction portfolio. An execution will be updated  if it already exists and inserted if it does not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertExecutionsTest() throws ApiException {
        String scope = null;
        String code = null;
        List<ExecutionRequest> executions = null;
        UpsertPortfolioExecutionsResponse response = api.upsertExecutions(scope, code, executions);

        // TODO: test validations
    }
    
    /**
     * Upsert portfolio details
     *
     * Update or insert details for the specified transaction portfolio. The details will be updated  if they already exist and inserted if they do not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertPortfolioDetailsTest() throws ApiException {
        String scope = null;
        String code = null;
        CreatePortfolioDetails portfolioDetails = null;
        String effectiveAt = null;
        PortfolioDetails response = api.upsertPortfolioDetails(scope, code, portfolioDetails, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * Upsert transaction properties
     *
     * Update or insert one or more transaction properties to a single transaction in a transaction portfolio.  Each property will be updated if it already exists and inserted if it does not.  Both transaction and portfolio must exist at the time when properties are updated or inserted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertTransactionPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        String transactionId = null;
        Map<String, PerpetualProperty> transactionProperties = null;
        UpsertTransactionPropertiesResponse response = api.upsertTransactionProperties(scope, code, transactionId, transactionProperties);

        // TODO: test validations
    }
    
    /**
     * Upsert transactions
     *
     * Update or insert transactions into the specified transaction portfolio. A transaction will be updated  if it already exists and inserted if it does not.  The maximum number of transactions that this method can upsert per request is 10,000.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertTransactionsTest() throws ApiException {
        String scope = null;
        String code = null;
        List<TransactionRequest> transactions = null;
        UpsertPortfolioTransactionsResponse response = api.upsertTransactions(scope, code, transactions);

        // TODO: test validations
    }
    
}
