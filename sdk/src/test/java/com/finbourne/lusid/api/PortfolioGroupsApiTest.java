/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1392
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.CreatePortfolioGroupRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.ExpandedGroup;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PortfolioGroup;
import com.finbourne.lusid.model.PortfolioGroupProperties;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.ResourceId;
import com.finbourne.lusid.model.ResourceListOfPortfolioGroup;
import com.finbourne.lusid.model.ResourceListOfProcessedCommand;
import com.finbourne.lusid.model.UpdatePortfolioGroupRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfolioGroupsApi
 */
@Ignore
public class PortfolioGroupsApiTest {

    private final PortfolioGroupsApi api = new PortfolioGroupsApi();

    
    /**
     * [EARLY ACCESS] Add portfolio to group
     *
     * Add a single portfolio to a portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPortfolioToGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime effectiveAt = null;
        ResourceId portfolioId = null;
        PortfolioGroup response = api.addPortfolioToGroup(scope, code, effectiveAt, portfolioId);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Add sub group to group
     *
     * Add a portfolio group to a portfolio group as a sub group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSubGroupToGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime effectiveAt = null;
        ResourceId portfolioGroupId = null;
        PortfolioGroup response = api.addSubGroupToGroup(scope, code, effectiveAt, portfolioGroupId);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Create portfolio group
     *
     * Create a portfolio group in a specific scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortfolioGroupTest() throws ApiException {
        String scope = null;
        CreatePortfolioGroupRequest request = null;
        PortfolioGroup response = api.createPortfolioGroup(scope, request);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Delete group properties
     *
     * Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties  will be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> propertyKeys = null;
        String effectiveAt = null;
        DeletedEntityResponse response = api.deleteGroupProperties(scope, code, propertyKeys, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Delete portfolio from group
     *
     * Remove a single portfolio from a portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioFromGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        String portfolioScope = null;
        String portfolioCode = null;
        OffsetDateTime effectiveAt = null;
        PortfolioGroup response = api.deletePortfolioFromGroup(scope, code, portfolioScope, portfolioCode, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Delete portfolio group
     *
     * Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.  In this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.  The deletion will be valid from the portfolio group&#39;s creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        DeletedEntityResponse response = api.deletePortfolioGroup(scope, code);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Delete sub group from group
     *
     * Remove a single portfolio group (sub group) from a portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubGroupFromGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        String subgroupScope = null;
        String subgroupCode = null;
        OffsetDateTime effectiveAt = null;
        PortfolioGroup response = api.deleteSubGroupFromGroup(scope, code, subgroupScope, subgroupCode, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get group properties
     *
     * List all the properties of a single portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        PortfolioGroupProperties response = api.getGroupProperties(scope, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get portfolio group
     *
     * Retrieve the definition of a single portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime effectiveAt = null;
        OffsetDateTime asAt = null;
        PortfolioGroup response = api.getPortfolioGroup(scope, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get portfolio group commands
     *
     * Gets all the commands that modified a single portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioGroupCommandsTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime fromAsAt = null;
        OffsetDateTime toAsAt = null;
        String filter = null;
        ResourceListOfProcessedCommand response = api.getPortfolioGroupCommands(scope, code, fromAsAt, toAsAt, filter);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Get portfolio group expansion
     *
     * List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioGroupExpansionTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime effectiveAt = null;
        OffsetDateTime asAt = null;
        List<String> propertyFilter = null;
        ExpandedGroup response = api.getPortfolioGroupExpansion(scope, code, effectiveAt, asAt, propertyFilter);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] List portfolio groups
     *
     * List all the portfolio groups in a single scope.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortfolioGroupsTest() throws ApiException {
        String scope = null;
        OffsetDateTime effectiveAt = null;
        OffsetDateTime asAt = null;
        String filter = null;
        ResourceListOfPortfolioGroup response = api.listPortfolioGroups(scope, effectiveAt, asAt, filter);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Update portfolio group
     *
     * Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable  due to the potential implications for data already stored against the portfolio group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime effectiveAt = null;
        UpdatePortfolioGroupRequest request = null;
        PortfolioGroup response = api.updatePortfolioGroup(scope, code, effectiveAt, request);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Upsert group properties
     *
     * Update or insert one or more properties onto a single group. A property will be updated if it  already exists and inserted if it does not. All properties must be of the domain &#39;PortfolioGroup&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertGroupPropertiesTest() throws ApiException {
        String scope = null;
        String code = null;
        Map<String, Property> groupProperties = null;
        PortfolioGroupProperties response = api.upsertGroupProperties(scope, code, groupProperties);

        // TODO: test validations
    }
    
}
