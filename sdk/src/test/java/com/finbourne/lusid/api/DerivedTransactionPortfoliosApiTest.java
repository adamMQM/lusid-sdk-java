/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1383
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.CreateDerivedTransactionPortfolioRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.Portfolio;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DerivedTransactionPortfoliosApi
 */
@Ignore
public class DerivedTransactionPortfoliosApiTest {

    private final DerivedTransactionPortfoliosApi api = new DerivedTransactionPortfoliosApi();

    
    /**
     * [EARLY ACCESS] Create derived transaction portfolio
     *
     * Creates a transaction portfolio that derives from an existing transaction portfolio. In a derived portfolio, parts of the portfolio can either be specific to this portfolio, or can be inherited from a \&quot;parent\&quot;. Different parts of the portfolio (e.g. transactions or properties) are combined in different ways. The portfolio details are either overridden in entirety, or not at all. The same is true for properties. Transactions on a derived portfolio are merged with its parent portfolio&#39;s transactions. If the parent portfolio is itself a derived portfolio, transactions from that parent are also merged (and that parent&#39;s portfolio&#39;s, if it is also a derived portfolio, and so on).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDerivedPortfolioTest() throws ApiException {
        String scope = null;
        CreateDerivedTransactionPortfolioRequest portfolio = null;
        Portfolio response = api.createDerivedPortfolio(scope, portfolio);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Delete portfolio details
     *
     * Deletes the portfolio details for the specified derived transaction portfolio
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDerivedPortfolioDetailsTest() throws ApiException {
        String scope = null;
        String code = null;
        String effectiveAt = null;
        DeletedEntityResponse response = api.deleteDerivedPortfolioDetails(scope, code, effectiveAt);

        // TODO: test validations
    }
    
}
